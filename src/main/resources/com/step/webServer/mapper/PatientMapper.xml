<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.step.webServer.mapper.PatientMapper">
    <cache-ref namespace="com.step.webServer.mapper" />
    <select id="numPatientsByUsername" resultType="java.lang.Integer">
        <if test="roleId == 1 || roleId == 2">
            select count(distinct patient_id)
            from user AS A, patient AS B
            where A.team_id = B.team_id
            and A.user_id = #{userId}
        </if>
        <if test="roleId == 3">
            select count(distinct patient_id)
            from user AS A, patient AS B, step.hospital AS C
            where C.admin_id = #{userId}
            and C.hospital_id = A.hospital_id
            and A.team_id = B.team_id
        </if>
        <if test="roleId == 5">
            select count(distinct patient_id)
            from patient
        </if>
    </select>
    <select id="numNewPatientsByUsername" resultType="java.lang.Integer">
        <if test="roleId == 1 || roleId == 2">
            select count(distinct patient_id)
            from user AS A, patient AS B
            where A.team_id = B.team_id
            and A.user_id = #{userId}
            and B.create_datetime > DATE_SUB(NOW(), INTERVAL 1 MONTH)
        </if>
        <if test="roleId == 3">
            select count(distinct patient_id)
            from user AS A, patient AS B, step.hospital AS C
            where C.admin_id = #{userId}
            and C.hospital_id = A.hospital_id
            and A.team_id = B.team_id
            and B.create_datetime > DATE_SUB(NOW(), INTERVAL 1 MONTH)
        </if>
        <if test="roleId == 5">
            select count(distinct patient_id)
            from patient AS B
            where B.create_datetime > DATE_SUB(NOW(), INTERVAL 1 MONTH)
        </if>
    </select>
    <sql id="bpTarget">
        select B.create_date, B.patient_id, sbp_target, dbp_target
        from (select max(create_date) as create_date, patient_id
              from followup group by patient_id) as A,
             followup as B
        where A.patient_id = B.patient_id and A.create_date = B.create_date
    </sql>
    <select id="numPatientsWithInvalidBpByUsername" resultType="java.lang.Integer">
        <if test="roleId == 1 || roleId == 2">
            select count(distinct bprecord.patient_id) from bprecord,
            (<include refid="bpTarget"/>) as C,
            user AS D,
            patient AS E
            where DATE(bprecord.create_datetime) = CURDATE()
            and bprecord.patient_id = C.patient_id
            and (bprecord.dbp > C.dbp_target
            or
            bprecord.sbp > C.sbp_target)
            and bprecord.patient_id = E.patient_id
            and E.team_id = D.team_id
            and D.user_id = #{userId}
        </if>
        <if test="roleId == 3">
            select count(distinct bprecord.patient_id) from bprecord,
            (<include refid="bpTarget"/>) as C,
            user AS D,
            patient AS E,
            hospital AS F
            where DATE(bprecord.create_datetime) = CURDATE()
            and bprecord.patient_id = C.patient_id
            and (bprecord.dbp > C.dbp_target
            or
            bprecord.sbp > C.sbp_target)
            and bprecord.patient_id = E.patient_id
            and F.admin_id = #{userId}
            and F.hospital_id = D.hospital_id
            and D.team_id = E.team_id
        </if>
        <if test="roleId == 5">
            select count(distinct bprecord.patient_id) from bprecord,
            (<include refid="bpTarget"/>) as C
            where DATE(bprecord.create_datetime) = CURDATE()
            and bprecord.patient_id = C.patient_id
            and (bprecord.dbp > C.dbp_target
            or
            bprecord.sbp > C.sbp_target)
        </if>
    </select>
    <select id="numNewPatientsNotTestedByUsername" resultType="java.lang.Integer">
        <if test="roleId == 1 || roleId == 2">
            select count(distinct B.patient_id)
            from user AS A,  patient AS B
            where A.team_id = B.team_id
            and A.user_id = #{userId}
            and B.create_datetime > DATE_SUB(NOW(), INTERVAL 1 MONTH)
            and not exists(select bprecord_id from bprecord
            where bprecord.create_datetime > DATE_SUB(NOW(), INTERVAL 3 DAY )
            and B.patient_id = bprecord.patient_id)
        </if>
        <if test="roleId == 3">
            select count(distinct B.patient_id)
            from user AS A,  patient AS B, hospital AS C
            where C.admin_id = #{userId}
            and C.hospital_id = A.hospital_id
            and A.team_id = B.team_id
            and B.create_datetime > DATE_SUB(NOW(), INTERVAL 1 MONTH)
            and not exists(select bprecord_id from bprecord
            where bprecord.create_datetime > DATE_SUB(NOW(), INTERVAL 3 DAY )
            and B.patient_id = bprecord.patient_id)
        </if>
        <if test="roleId == 5">
            select count(distinct B.patient_id)
            from patient AS B
            where B.create_datetime > DATE_SUB(NOW(), INTERVAL 1 MONTH)
            and not exists(select bprecord_id from bprecord
            where bprecord.create_datetime > DATE_SUB(NOW(), INTERVAL 3 DAY )
            and B.patient_id = bprecord.patient_id)
        </if>
    </select>
    <sql id="latestHomeBp">
        select C.patient_id,  concat(max(C.sbp), '/', max(C.dbp)) as latest_home_bp
        from (
          select A.patient_id, A.sbp, A.dbp
          from bprecord AS A inner join (select max(create_datetime) as max_datetime, patient_id
                                         from bprecord
                                         group by patient_id) as B
                                        on A.create_datetime = B.max_datetime and
                                           A.patient_id = B.patient_id
          )AS C
        group by C.patient_id
    </sql>
    <select id="selectAllPatients" resultType="map">
        select
               distinct
               C.patient_id AS patientId,
               C.patient_name AS patientName,
               C.gender,
               C.age,
               D.latest_home_bp AS latestHomeBP,
              RIGHT(C.prc_id, 6) AS prcNoTailSix from
        (
            select
                P.patient_id,
                P.patient_name,
                P.gender,
                P.age,
                P.prc_id
            from patient AS P, hospital AS H, user AS U, team AS T
            where 1 and 1
            <if test="keyword != null and keyword != ''">
                and (
                P.patient_name like concat('%', #{keyword}, '%')
                or P.phone_no like concat('%', #{keyword}, '%')
                or P.prc_id like concat('%',#{keyword}, '%')
                )
            </if>
            <if test="queryType == 'newPatients'">
                and P.create_datetime > DATE_SUB(NOW(), INTERVAL 1 MONTH)
            </if>
            <if test="queryType == 'newPatientsNotTested'">
                and P.create_datetime > DATE_SUB(NOW(), INTERVAL 1 MONTH)
                and not exists(
                  select bprecord_id from bprecord AS B
                  where B.create_datetime > DATE_SUB(NOW(), INTERVAL 3 DAY )
                    and P.patient_id = B.patient_id
                  )
            </if>
            <if test="queryType == 'abnormal'">
                and P.patient_id in (
                    select distinct bprecord.patient_id from bprecord,
                    (<include refid="bpTarget"/>) as C
                    where DATE(bprecord.create_datetime) = CURDATE()
                    and bprecord.patient_id = C.patient_id
                    and (bprecord.dbp > C.dbp_target
                    or
                    bprecord.sbp > C.sbp_target)
                )
            </if>
            <if test="roleId == 1 || roleId == 2">
                and P.team_id = T.team_id
                and T.admin_id in
                    (
                      select Y.admin_id from user AS X, hospital AS Y
                      where X.user_id = #{userId}
                        and X.hospital_id = Y.hospital_id
                      )
            </if>
            <if test="roleId == 3">
                and P.team_id = T.team_id
                and T.admin_id = #{userId}
            </if>
        ) AS C left join (<include refid="latestHomeBp"/>) as D using(patient_id)

    </select>
    <select id="selectPatientId" resultType="int">
        select patient_id from patient
        where patient_name = #{patientName}
    </select>
    <insert id="insertPatient" useGeneratedKeys="true" keyProperty="patientId">
        insert into patient
          (patient_name, create_datetime, gender, prc_id, birthday,
           marriage, ethnicity, degree_education, profession, address,
           phone_no, medical_insurance_type_id, emerg_cont_name,
           emerg_cont_phone_no, emerg_cont_relationship, team_id, age, hbp_dx_date, max_sbp, max_dbp, password)
           values (#{patientName}, #{createDatetime}, #{gender}, #{prcId}, #{birthday},
                   #{marriage}, #{ethnicity}, #{degreeEducation}, #{profession}, #{address},
                   #{phoneNo}, #{medicalInsuranceTypeId}, #{emergContName},
                   #{emergContPhoneNo}, #{emergContRelationship}, #{teamId}, #{age}, #{hbpDxDate}, #{maxSbp}, #{maxDbp}, #{password}
                   )
    </insert>
    <select id="patientMeta" resultType="map">
        select
               patient_name AS patientName,
               gender,
               age,
               RIGHT(prc_id, 6) as prcNoTailSix
        from step.patient
        where patient_id = #{patientId}
    </select>
    <select id="patientOverview" resultType="map">
        select '' as bp_level, '' as risk_level, '已达标' as is_valid, '' as bp_period, '' as step, '' as follow_up_datetime, '' as current_mgt_plan
    </select>
    <select id="courserecord" resultType="map">
        select self_monitor, diet_guide, salt_limit_and_drug_guidance
        from step.patient
        where patient_id = #{patientId}
    </select>
    <select id="getPatientNumByAdminId" resultType="int">
        select count(*) from patient as A, team as B
        where A.team_id = B.team_id
        and B.admin_id = #{adminId}
    </select>
    <select id="getValidPatientByAdminId" resultType="int">
        select count(*) from patient as A, team as B
        where A.team_id = B.team_id
          and B.admin_id = #{adminId}
          and
            (exists
                (select * from followup AS F1,
                               (select patient_id, max(create_date) AS latestCreateDate from followup
                                group by patient_id) AS F2
                 where A.patient_id = F1.patient_id
                   and F1.patient_id = F2.patient_id
                   and F1.create_date = latestCreateDate
                   and F1.dbp <![CDATA[ < ]]> F1.dbp_target
                   and F1.sbp <![CDATA[ < ]]> F1.sbp_target
                )
              or not
             (exists
                 (select * from followup AS F1
                  where A.patient_id = F1.patient_id
                 )
              )
              )

    </select>
    <select id="getPatientIdsByTeamId" resultType="int">
        select patient_id from step.patient where team_id = #{teamId}
    </select>
    <select id="getPatientById" resultType="patient">
        select * from patient where patient_id = #{patientId}
    </select>
    <select id="getPatientByPrcId" resultType="patient">
        select * from patient
        where prc_id = #{prcId}
    </select>
    
    <select id="getRiskFactorClassCount" resultType="map">
        select C.riskfactorclass_id AS riskfactorclassId,
               case when counter is not null
                 then counter
                 else 0 end as num
        from riskfactorclass AS C
          left join (
            select
                   riskfactorclass_id,
                   count(*) as counter
            from riskfactor_followup AS A, riskfactor AS B
            where A.riskfactor_id = B.riskfactor_id
            and A.checked
            and A.followup_id = #{followupId}
            group by riskfactorclass_id) AS D
          on C.riskfactorclass_id = D.riskfactorclass_id

    </select>
    <update id="updatePatient">
        update patient
        set patient_name = #{patientName},
            gender = #{gender},
            prc_id = #{prcId},
            birthday = #{birthday},
            age = #{age},
            marriage = #{marriage},
            ethnicity = #{ethnicity},
            degree_education = #{degreeEducation},
            profession = #{profession},
            address = #{address},
            phone_no = #{phoneNo},
            medical_insurance_type_id = #{medicalInsuranceTypeId},
            emerg_cont_name = #{emergContName},
            emerg_cont_phone_no = #{emergContPhoneNo},
            emerg_cont_relationship = #{emergContRelationship},
            hbp_dx_date = #{hbpDxDate},
            max_sbp = #{maxSbp},
            max_dbp = #{maxDbp}
        where patient_id = #{patientId}
    </update>
    <update id="updatePw">
        update patient
        set password = #{newPw}
        where prc_id = #{prcId}
        and password = #{crtPw}
    </update>
</mapper>
