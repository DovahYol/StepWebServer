<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.step.webServer.mapper.PatientMapper">
    <cache-ref namespace="com.step.webServer.mapper" />
    <select id="numPatientsByUsername" resultType="java.lang.Integer">
      select count(distinct patient.patient_id)
      from user, patient
      where user.team_id = patient.team_id
        and user.username = #{username}
    </select>
    <select id="numNewPatientsByUsername" resultType="java.lang.Integer">
      select count(distinct patient.patient_id)
      from user, patient
      where user.team_id = patient.team_id
        and user.username = #{username}
      and patient.create_datetime > DATE_SUB(NOW(), INTERVAL 1 MONTH)
    </select>
    <sql id="bpTarget">
        select B.create_date, B.patient_id, sbp_target, dbp_target
        from (select max(create_date) as create_date, patient_id
              from followup group by patient_id) as A,
             followup as B
        where A.patient_id = B.patient_id and A.create_date = B.create_date
    </sql>
    <select id="numPatientsWithInvalidBpByUsername" resultType="java.lang.Integer">
        select count(distinct bprecord.patient_id) from bprecord,
                                                        (<include refid="bpTarget"/>) as C,
                                                        user,
                                                        patient
        where DATE(bprecord.create_datetime) = CURDATE()
        and bprecord.patient_id = C.patient_id
        and (bprecord.dbp > C.dbp_target
               or
             bprecord.sbp > C.sbp_target)
        and bprecord.patient_id = patient.patient_id
        and patient.team_id = user.team_id
        and user.username = #{username}
    </select>
    <select id="numNewPatientsNotTestedByUsername" resultType="java.lang.Integer">
        select count(distinct patient.patient_id)
        from user left join patient on user.team_id = patient.team_id
        where user.username = #{username}
        and patient.create_datetime > DATE_SUB(NOW(), INTERVAL 1 MONTH)
        and not exists(select bprecord_id from bprecord
                        where bprecord.create_datetime > DATE_SUB(NOW(), INTERVAL 3 DAY )
                        and patient.patient_id = bprecord.patient_id)
    </select>
    <sql id="latestHomeBp">
        select distinct bprecord.patient_id, concat(sbp, '/', dbp) as latest_home_bp
        from bprecord inner join (select max(create_datetime) as max_datetime, patient_id
                                  from bprecord
                                  group by patient_id) as latest_bprecord
        on create_datetime = max_datetime and
          bprecord.patient_id = latest_bprecord.patient_id
    </sql>
    <select id="selectAllPatients" resultType="map">
        select
               C.patient_id AS patientId,
               C.patient_name AS patientName,
               C.gender,
               C.age,
               D.latest_home_bp AS latestHomeBP,
              RIGHT(C.prc_id, 6) AS prcNoTailSix from
        (
            select
                distinct
                    A.patient_id,
                    A.patient_name,
                    A.gender,
                    A.age,
                    A.prc_id
            from patient AS A
            where 1 and 1
            <if test="keyword != null and keyword != ''">
                and (
                A.patient_name like concat('%', #{keyword}, '%')
                or A.phone_no like concat('%', #{keyword}, '%')
                or A.prc_id like concat('%',#{keyword}, '%')
                )
            </if>
        ) AS C left join (<include refid="latestHomeBp"/>) as D using(patient_id)

    </select>
    <select id="selectPatientId" resultType="int">
        select patient_id from patient
        where patient_name = #{patientName}
    </select>
    <insert id="insertPatient" useGeneratedKeys="true" keyProperty="patientId">
        insert into patient
          (patient_name, create_datetime, gender, prc_id, birthday,
           marriage, ethnicity, degree_education, profession, address,
           phone_no, medical_insurance_type_id, emerg_cont_name,
           emerg_cont_phone_no, emerg_cont_relationship, team_id, age, hbp_dx_date, max_sbp, max_dbp)
           values (#{patientName}, #{createDatetime}, #{gender}, #{prcId}, #{birthday},
                   #{marriage}, #{ethnicity}, #{degreeEducation}, #{profession}, #{address},
                   #{phoneNo}, #{medicalInsuranceTypeId}, #{emergContName},
                   #{emergContPhoneNo}, #{emergContRelationship}, #{teamId}, #{age}, #{hbpDxDate}, #{maxSbp}, #{maxDbp}
                   )
    </insert>
    <select id="patientMeta" resultType="map">
        select
               patient_name AS patientName,
               gender,
               age,
               '' as diagnose,
               RIGHT(prc_id, 6) as prcNoTailSix
        from step.patient
        where patient_id = #{patientId}
    </select>
    <select id="patientOverview" resultType="map">
        select '' as bp_level, '' as risk_level, '已达标' as is_valid, '' as bp_period, '' as step, '' as follow_up_datetime, '' as current_mgt_plan
    </select>
    <select id="courserecord" resultType="map">
        select self_monitor, diet_guide, salt_limit_and_drug_guidance
        from step.patient
        where patient_id = #{patientId}
    </select>
    <select id="getPatientNumByAdminId" resultType="int">
        select count(*) from patient as A, team as B
        where A.team_id = B.team_id
        and B.admin_id = #{adminId}
    </select>
    <select id="getPatientIdsByTeamId" resultType="int">
        select patient_id from step.patient where team_id = #{teamId}
    </select>
    <select id="getPatientById" resultType="patient">
        select * from patient where patient_id = #{patientId}
    </select>
    
    <select id="getRiskFactorClassCount" resultType="map">
        select C.riskfactorclass_id AS riskfactorclassId,
               case when counter is not null
                 then counter
                 else 0 end as num
        from riskfactorclass AS C
          left join (
            select
                   riskfactorclass_id,
                   count(*) as counter
            from riskfactor_followup AS A, riskfactor AS B
            where A.riskfactor_id = B.riskfactor_id
            and A.checked
            and A.followup_id = #{followupId}
            group by riskfactorclass_id) AS D
          on C.riskfactorclass_id = D.riskfactorclass_id

    </select>
</mapper>
